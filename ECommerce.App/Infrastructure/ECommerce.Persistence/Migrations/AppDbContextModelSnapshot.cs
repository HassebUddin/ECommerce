// <auto-generated />
using System;
using ECommerce.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ECommerce.Domain.Entity.Account.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.File.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e76c4fcf-4443-4cea-a649-576331c7603e",
                            ConcurrencyStamp = "f435c47c-7315-4881-8242-03b8dc9458c7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1c9d1dba-c977-471a-98c5-a2d5f04935c1",
                            ConcurrencyStamp = "3578c652-886f-4a4c-92ea-33fde2482f15",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "1e3672e3-8563-49a3-8024-e36d2bf3dcb0",
                            ConcurrencyStamp = "78070f36-e02f-42f0-bbc8-fdfc1b6261ab",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7fc73959-cc3d-47d2-a017-dea6df68ae94",
                            AccessFailedCount = 0,
                            Address = "north nazimabad",
                            City = "NewYork",
                            ConcurrencyStamp = "0a4d1552-6ac3-4b17-81ee-c28316392bc2",
                            Country = "USA",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FullName = "User",
                            Gender = "Male",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6xIAmnTHDgItouyUj5VhwoOnRgErJWn7YVlCO83n0VfHBTdRq/0Q/DxB5MLonmbw==",
                            PhoneNumber = "283748927387",
                            PhoneNumberConfirmed = false,
                            Profession = "DotNet",
                            SecurityStamp = "32322ad6-7b54-4523-8ab8-482ad5575ff4",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        },
                        new
                        {
                            Id = "45121cfb-6a63-4950-9d67-68437d1bc43f",
                            AccessFailedCount = 0,
                            Address = "surjany",
                            City = "NewYork",
                            ConcurrencyStamp = "b542e846-e021-40ba-ac20-dd528e8ed23a",
                            Country = "USA",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Admin",
                            Gender = "Male",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENJQQxBUFgsi/qugNZzA9mYeEGiT3d+NHMK2YuLnh0w1U8RT1pBEsOBuehKWabWk0A==",
                            PhoneNumber = "283748927387",
                            PhoneNumberConfirmed = false,
                            Profession = "DotNet",
                            SecurityStamp = "033b4cfd-a2f0-4814-90a6-5f4af286caf3",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "8fc73959-cc3d-47d2-a017-dea6df68ae94",
                            AccessFailedCount = 0,
                            Address = "north nazimabad",
                            City = "NewYork",
                            ConcurrencyStamp = "4cc7e3b2-6999-474b-95c1-b923c04c3a05",
                            Country = "USA",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "SuperAdmin",
                            Gender = "Male",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPIsrOJqamHcWlMwfUuRR4x9B72M/2gFX5hFaLWohT3DJEKCj127RjcVAwenAIMxYQ==",
                            PhoneNumber = "283748927387",
                            PhoneNumberConfirmed = false,
                            Profession = "DotNet",
                            SecurityStamp = "520474c6-5127-4dc5-bcd3-3892d8bbebaf",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.DinnerTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RestaurantBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantBranchId");

                    b.ToTable("dinnerTables");

                    b.HasData(
                        new
                        {
                            Id = "1e1f1g1h-1i1j-1k1l-1m1n-1o1p1q1r1s1",
                            Capacity = 4,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "1a1b1c1d-1e1f-1g1h-1i1j-1k1l1m1n1o1",
                            TableName = "Table 1",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2e2f2g2h-2i2j-2k2l-2m2n-2o2p2q2r2s2",
                            Capacity = 2,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "2a2b2c2d-2e2f-2g2h-2i2j-2k2l2m2n2o2",
                            TableName = "Table 2",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3e3f3g3h-3i3j-3k3l-3m3n-3o3p3q3r3s3",
                            Capacity = 6,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "3a3b3c3d-3e3f-3g3h-3i3j-3k3l3m3n3o3",
                            TableName = "Table 3",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4e4f4g4h-4i4j-4k4l-4m4n-4o4p4q4r4s4",
                            Capacity = 8,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "4a4b4c4d-4e4f-4g4h-4i4j-4k4l4m4n4o4",
                            TableName = "Table 4",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5e5f5g5h-5i5j-5k5l-5m5n-5o5p5q5r5s5",
                            Capacity = 4,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "5a5b5c5d-5e5f-5g5h-5i5j-5k5l5m5n5o5",
                            TableName = "Table 5",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6e6f6g6h-6i6j-6k6l-6m6n-6o6p6q6r6s6",
                            Capacity = 2,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "6a6b6c6d-6e6f-6g6h-6i6j-6k6l6m6n6o6",
                            TableName = "Table 6",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7e7f7g7h-7i7j-7k7l-7m7n-7o7p7q7r7s7",
                            Capacity = 6,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "7a7b7c7d-7e7f-7g7h-7i7j-7k7l7m7n7o7",
                            TableName = "Table 7",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8e8f8g8h-8i8j-8k8l-8m8n-8o8p8q8r8s8",
                            Capacity = 8,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantBranchId = "8a8b8c8d-8e8f-8g8h-8i8j-8k8l8m8n8o8",
                            TableName = "Table 8",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("UserId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.RestaurantBranch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("restaurantBranches");

                    b.HasData(
                        new
                        {
                            Id = "1a1b1c1d-1e1f-1g1h-1i1j-1k1l1m1n1o1",
                            Address = "111 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchA1@restaurantA.com",
                            ImageUrl = "https://images.unsplash.com/photo-1589927986089-3581237894a4",
                            Name = "Branch A1",
                            Phone = "321-654-9870",
                            RestaurantId = "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2a2b2c2d-2e2f-2g2h-2i2j-2k2l2m2n2o2",
                            Address = "112 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchA2@restaurantA.com",
                            ImageUrl = "https://images.unsplash.com/photo-1610515162442-19625d0548c7",
                            Name = "Branch A2",
                            Phone = "321-654-9871",
                            RestaurantId = "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3a3b3c3d-3e3f-3g3h-3i3j-3k3l3m3n3o3",
                            Address = "222 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchB1@restaurantB.com",
                            ImageUrl = "https://images.unsplash.com/photo-1543353071-6e0ffebc1b68",
                            Name = "Branch B1",
                            Phone = "654-321-9870",
                            RestaurantId = "2b3c4d5e-6f7g-8h9i-0j1k-2l3m4n5o6p7q",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4a4b4c4d-4e4f-4g4h-4i4j-4k4l4m4n4o4",
                            Address = "223 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchB2@restaurantB.com",
                            ImageUrl = "https://images.unsplash.com/photo-1610515162442-19625d0548c7",
                            Name = "Branch B2",
                            Phone = "654-321-9871",
                            RestaurantId = "2b3c4d5e-6f7g-8h9i-0j1k-2l3m4n5o6p7q",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5a5b5c5d-5e5f-5g5h-5i5j-5k5l5m5n5o5",
                            Address = "333 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchC1@restaurantC.com",
                            ImageUrl = "https://images.unsplash.com/photo-1610515162442-19625d0548c7",
                            Name = "Branch C1",
                            Phone = "987-123-4560",
                            RestaurantId = "3c4d5e6f-7g8h-9i0j-k1l2-m3n4o5p6q7r",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6a6b6c6d-6e6f-6g6h-6i6j-6k6l6m6n6o6",
                            Address = "334 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchC2@restaurantC.com",
                            ImageUrl = "https://images.unsplash.com/photo-1610515162442-19625d0548c7",
                            Name = "Branch C2",
                            Phone = "987-123-4561",
                            RestaurantId = "3c4d5e6f-7g8h-9i0j-k1l2-m3n4o5p6q7r",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7a7b7c7d-7e7f-7g7h-7i7j-7k7l7m7n7o7",
                            Address = "444 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchD1@restaurantD.com",
                            ImageUrl = "https://images.unsplash.com/photo-1601758167934-ec10e43c9c16",
                            Name = "Branch D1",
                            Phone = "789-456-1230",
                            RestaurantId = "4d5e6f7g-8h9i-0j1k-2l3m-4n5o6p7q8r9",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8a8b8c8d-8e8f-8g8h-8i8j-8k8l8m8n8o8",
                            Address = "445 Branch St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "branchD2@restaurantD.com",
                            ImageUrl = "https://images.unsplash.com/photo-1601758167934-ec10e43c9c16",
                            Name = "Branch D2",
                            Phone = "789-456-1231",
                            RestaurantId = "4d5e6f7g-8h9i-0j1k-2l3m-4n5o6p7q8r9",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.Resturant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("resturants");

                    b.HasData(
                        new
                        {
                            Id = "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
                            Address = "123 Main St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantA.com",
                            ImageUrl = "https://images.unsplash.com/photo-1509021436668-719bce81c2d5",
                            Name = "Restaurant A",
                            Phone = "123-456-7890",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2b3c4d5e-6f7g-8h9i-0j1k-2l3m4n5o6p7q",
                            Address = "456 Another St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantB.com",
                            ImageUrl = "https://images.unsplash.com/photo-1609001743548-0c2028d6b8d2",
                            Name = "Restaurant B",
                            Phone = "987-654-3210",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3c4d5e6f-7g8h-9i0j-k1l2-m3n4o5p6q7r",
                            Address = "789 Food St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantC.com",
                            ImageUrl = "https://images.unsplash.com/photo-1506794778163-1e31b24c0c66",
                            Name = "Restaurant C",
                            Phone = "555-0123-4567",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4d5e6f7g-8h9i-0j1k-2l3m-4n5o6p7q8r9",
                            Address = "101 Eatery Rd, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantD.com",
                            ImageUrl = "https://images.unsplash.com/photo-1604901400781-67d71e7b7248",
                            Name = "Restaurant D",
                            Phone = "654-321-0987",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5e6f7g8h-9i0j-k1l2-m3n4-5o6p7q8r9s0",
                            Address = "202 Cuisine Ave, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantE.com",
                            ImageUrl = "https://images.unsplash.com/photo-1568673228748-bb43f3a5ebaf",
                            Name = "Restaurant E",
                            Phone = "321-654-9870",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6f7g8h9i-0j1k-2l3m-4n5o-6p7q8r9s0t1",
                            Address = "303 Taste St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantF.com",
                            ImageUrl = "https://images.unsplash.com/photo-1589927986089-3581237894a4",
                            Name = "Restaurant F",
                            Phone = "456-789-0123",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7g8h9i0j-k1l2-m3n4-5o6p-7q8r9s0t1u2",
                            Address = "404 Flavor St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantG.com",
                            ImageUrl = "https://images.unsplash.com/photo-1543353071-6e0ffebc1b68",
                            Name = "Restaurant G",
                            Phone = "789-012-3456",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8h9i0j1k-2l3m-4n5o-6p7q-8r9s0t1u2v3",
                            Address = "505 Dish St, City, Country",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@restaurantH.com",
                            ImageUrl = "https://images.unsplash.com/photo-1601758167934-ec10e43c9c16",
                            Name = "Restaurant H",
                            Phone = "321-987-6543",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.TimeSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DinnerTableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DinnerTableId");

                    b.ToTable("timeSlots");

                    b.HasData(
                        new
                        {
                            Id = "1g1h1i1j-1k1l-1m1n-1o1p-1q1r1s1t1u1",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "1e1f1g1h-1i1j-1k1l-1m1n-1o1p1q1r1s1",
                            MealType = "Dinner",
                            ReservationDay = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Available",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2g2h2i2j-2k2l-2m2n-2o2p-2q2r2s2t2u2",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "2e2f2g2h-2i2j-2k2l-2m2n-2o2p2q2r2s2",
                            MealType = "Lunch",
                            ReservationDay = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Reserved",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3g3h3i3j-3k3l-3m3n-3o3p-3q3r3s3t3u3",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "3e3f3g3h-3i3j-3k3l-3m3n-3o3p3q3r3s3",
                            MealType = "Brunch",
                            ReservationDay = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Available",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4g4h4i4j-4k4l-4m4n-4o4p-4q4r4s4t4u4",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "4e4f4g4h-4i4j-4k4l-4m4n-4o4p4q4r4s4",
                            MealType = "Dinner",
                            ReservationDay = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Reserved",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5g5h5i5j-5k5l-5m5n-5o5p-5q5r5s5t5u5",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "5e5f5g5h-5i5j-5k5l-5m5n-5o5p5q5r5s5",
                            MealType = "Breakfast",
                            ReservationDay = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Available",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6g6h6i6j-6k6l-6m6n-6o6p-6q6r6s6t6u6",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "6e6f6g6h-6i6j-6k6l-6m6n-6o6p6q6r6s6",
                            MealType = "Lunch",
                            ReservationDay = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Reserved",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7g7h7i7j-7k7l-7m7n-7o7p-7q7r7s7t7u7",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "7e7f7g7h-7i7j-7k7l-7m7n-7o7p7q7r7s7",
                            MealType = "Dinner",
                            ReservationDay = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Available",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8g8h8i8j-8k8l-8m8n-8o8p-8q8r8s8t8u8",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DinnerTableId = "8e8f8g8h-8i8j-8k8l-8m8n-8o8p8q8r8s8",
                            MealType = "Brunch",
                            ReservationDay = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            TableStatus = "Reserved",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("App UserRole");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.File.UserImage", b =>
                {
                    b.HasBaseType("ECommerce.Domain.Entity.File.Image");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("UserImage");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "45121cfb-6a63-4950-9d67-68437d1bc43f",
                            RoleId = "e76c4fcf-4443-4cea-a649-576331c7603e"
                        },
                        new
                        {
                            UserId = "8fc73959-cc3d-47d2-a017-dea6df68ae94",
                            RoleId = "1c9d1dba-c977-471a-98c5-a2d5f04935c1"
                        },
                        new
                        {
                            UserId = "7fc73959-cc3d-47d2-a017-dea6df68ae94",
                            RoleId = "1e3672e3-8563-49a3-8024-e36d2bf3dcb0"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Account.RefreshToken", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.DinnerTable", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Web.RestaurantBranch", "Branch")
                        .WithMany("DinnerTables")
                        .HasForeignKey("RestaurantBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.Reservation", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Web.TimeSlot", "TimeSlot")
                        .WithMany("Reservations")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.RestaurantBranch", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Web.Resturant", "Restaurant")
                        .WithMany("RestaurantBranches")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.TimeSlot", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Web.DinnerTable", "DinnerTable")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DinnerTableId");

                    b.Navigation("DinnerTable");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.File.UserImage", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Identity.AppUserRole", b =>
                {
                    b.HasOne("ECommerce.Domain.Entity.Identity.AppRole", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entity.Identity.AppUser", "Users")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Identity.AppUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("UserImages");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.DinnerTable", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.RestaurantBranch", b =>
                {
                    b.Navigation("DinnerTables");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.Resturant", b =>
                {
                    b.Navigation("RestaurantBranches");
                });

            modelBuilder.Entity("ECommerce.Domain.Entity.Web.TimeSlot", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
